# -*- coding: utf-8 -*-
"""TCC_Parte_4_merge

Automatically generated by Colaboratory.

"""

# Bibliotecas

import pandas as pd

#Para mostrar todas as colunas
pd.set_option('display.max_columns', None)

# Carrega os arquivos

# De fato, será preciso carregar os arquivos TRATADOS, e não os iniciais
gestor = pd.read_csv('gestor_final.csv',encoding = 'latin-1', sep=",", low_memory = False)
peticao = pd.read_csv('peticao_final.csv', encoding = 'latin-1', sep=',', low_memory = False)

"""# Base SAMMED (gestor + peticao)

## EAN como chave para o merge entre gestor e peticao = dataframe sammed
"""

peticao.sort_values(by='EAN', ascending = True)

gestor.sort_values(by='EAN', ascending = True)

sammed = pd.merge(gestor, peticao, on = 'EAN', how='inner')

# Verificar as quantidades de valores distintos
quantidade_valores_distintos = sammed['NU_PROCESSO_DV'].nunique()
print(f"A coluna NU_PROCESSO_DV possui {sammed['NU_PROCESSO_DV'].nunique()} valores distintos.")

"""## Exclusão de linhas na base sammed

### Drop 1: mantém apenas data entrada sammed >= 2018-01-01
"""

# Filtra pela data de entrada da petição SAMMED

sammed['DT_ENTRADA_PETICAO_SM'] = pd.to_datetime(sammed['DT_ENTRADA_PETICAO_SM'])

drop1sammed = sammed.loc[sammed['DT_ENTRADA_PETICAO_SM'] < '2018-01-01']

# Salvando o drop em csv
drop1sammed.to_csv('drop1sammed.csv', index=False)

sammed = sammed[sammed['DT_ENTRADA_PETICAO_SM'] >= '2018-01-01']
# A base sammed contém apenas linhas cuja entrada da petição na SCMED foi a partir de janeiro de 2018

# Verifica as quantidades de valores distintos
quantidade_valores_distintos = sammed['NU_PROCESSO_DV'].nunique()
print(f"A coluna NU_PROCESSO_DV possui {sammed['NU_PROCESSO_DV'].nunique()} valores distintos.")

"""## Drop2: processos datavisa duplicados (mantém a linha com a data de comercialização mais antiga)"""

sammed = sammed.sort_values(by = 'INICIO_COMERCIALIZACAO_quant_date', ascending = True)

drop2sammed = sammed[sammed.duplicated(subset ='NU_PROCESSO_DV', keep = 'first')]

# Salva o drop 2
drop2sammed.to_csv('drop2sammed.csv', index=False)

sammed= sammed.drop_duplicates(subset='NU_PROCESSO_DV', keep = 'first')

# Verifica as quantidades de valores distintos
quantidade_valores_distintos = sammed['NU_PROCESSO_DV'].nunique()
print(f"A coluna NU_PROCESSO_DV possui {sammed['NU_PROCESSO_DV'].nunique()} valores distintos.")

"""Renomeia a coluna chave para os merges posteriores"""

sammed = sammed.rename(columns ={'NU_PROCESSO_DV': 'NU_PROCESSO'})

sammed['NU_PROCESSO'] = sammed['NU_PROCESSO'].astype(str)  # Converta para string se necessário

sammed.to_csv('sammed.csv', index = False)

"""### Término dos drops sammed

# Ordinários comercializados
"""

sammed = pd.read_csv('sammed.csv')

ordinarios = pd.read_csv('ordinarios.csv') # Arquivo gerado na parte 3

ordinarios['NU_PROCESSO'] = ordinarios['NU_PROCESSO'].astype(str)

sammed['NU_PROCESSO'] = sammed['NU_PROCESSO'].astype(str)

ordinarios_comercializados = pd.merge(ordinarios, sammed, on='NU_PROCESSO', how = 'inner')

ordinarios_comercializados.to_csv('ordinarios_comercializados.csv', index= False)

nao_mesclado_ordinarios = ordinarios[~ordinarios['NU_PROCESSO'].isin(ordinarios_comercializados['NU_PROCESSO'])]

nao_mesclado_ordinarios.to_csv('nao_mesclado_ordinarios.csv', index = False)

"""# Clones comercializados"""

sammed = pd.read_csv('sammed.csv')

clones = pd.read_csv('clones.csv') # arquivo gerado na parte 3

sammed['NU_PROCESSO'] = sammed['NU_PROCESSO'].astype(str)  # Converta para string se necessário

clones['NU_PROCESSO'] = clones['NU_PROCESSO'].astype(str)  # Converta para string se necessário

clones_comercializados = pd.merge(clones, sammed, on='NU_PROCESSO', how = 'inner')

clones_comercializados.to_csv('clones_comercializados.csv', index= False)

nao_mesclado_clones = clones[~clones['NU_PROCESSO'].isin(clones_comercializados['NU_PROCESSO'])]

nao_mesclado_clones.to_csv('nao_mesclados_clones.csv', index = False)

"""# COVID comercializados"""

sammed = pd.read_csv('sammed.csv')

covid = pd.read_csv('covid.csv')

sammed['NU_PROCESSO'] = sammed['NU_PROCESSO'].astype(str)  # Converta para string se necessário

covid['NU_PROCESSO'] = covid['NU_PROCESSO'].astype(str)

covid_comercializados = pd.merge(covid, sammed, on = 'NU_PROCESSO', how='inner')

covid_comercializados.to_csv('covid_comercializados.csv', index = False)

nao_mesclado_covid = covid[~covid['NU_PROCESSO'].isin(covid_comercializados['NU_PROCESSO'])]

nao_mesclado_covid.to_csv('covid_fora_sammed.csv', index = False)

"""# Priorizados comercializados"""

sammed = pd.read_csv('sammed.csv')

priorizadas = pd.read_csv('priorizadas.csv', sep=";")

sammed['NU_PROCESSO'] = sammed['NU_PROCESSO'].astype(str)  # Converta para string se necessário

priorizadas['NU_PROCESSO'] = priorizadas['NU_PROCESSO'].astype(str)

priorizadas_comercializadas =  pd.merge(priorizadas, sammed, on = 'NU_PROCESSO', how='inner')

priorizadas_comercializadas.to_csv('priorizadas_comercializadas.csv', index = False)

priorizadas_fora_sammed = priorizadas[~priorizadas['NU_PROCESSO'].isin(priorizadas_comercializadas['NU_PROCESSO'])]

priorizadas_fora_sammed.to_csv('priorizadas_fora_sammed.csv', index = False)

"""# Doencas raras comercializadas"""

sammed = pd.read_csv('sammed.csv')

doencas_raras = pd.read_csv('doencas_raras.csv')

sammed['NU_PROCESSO'] = sammed['NU_PROCESSO'].astype(str)  # Converta para string se necessário

doencas_raras['NU_PROCESSO'] = doencas_raras['NU_PROCESSO'].astype(str)

doencas_raras_comercializadas =  pd.merge(doencas_raras, sammed, on = 'NU_PROCESSO', how='inner')

doencas_raras_comercializadas.to_csv('doencas_raras_comercializadas.csv', index = False)

# Não tem medicamento para doenças raras fora do sammed

doencas_raras.head()