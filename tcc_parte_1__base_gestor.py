# -*- coding: utf-8 -*-
"""TCC_Parte_1 _base_gestor

Automatically generated by Colaboratory.

"""

# Bibliotecas

import pandas as pd
from sklearn import preprocessing
from sklearn.metrics import cohen_kappa_score

# Para evitar o erro que o colab excedeu a capacidade

from pprint import pprint
printable = 'long statement'
pprint(printable)

#Para mostrar todas as colunas
pd.set_option('display.max_columns', None)

# Carrega e abre o arquivo
gestor = pd.read_csv('gestor.csv',encoding = 'latin-1', sep="|", low_memory = False)

"""## Descreve a base de dados e ajusta COLUNAS

Verifica adequabilidade da chave EAN (utilizada para o merge)
"""

gestor['NU_REGISTRO_SM'].isnull().sum()

gestor['NU_GGREM_SM'].isnull().sum()

gestor['NU_EAN_SM'].isnull().sum()
# Drop 1

# Verifica as quantidades de valores distintos para EAN (chave para o merge)
quantidade_valores_distintos = gestor['NU_EAN_SM'].nunique()
print(f"A coluna NU_EAN_SM possui {gestor['NU_EAN_SM'].nunique()} valores distintos.")

# Verifica linhas duplicadas para EAN
casos_duplicados = gestor.duplicated(subset='NU_EAN_SM').sum()

print(casos_duplicados)
# Drop 2

"""### Quantidades de registro de comercialização, por ano"""

# Dicionário dos anos
# ANO_VIGENTE = 2023
#ANO1 =2022
#ANO2 = 2021
#ANO 3 = 2020
#ANO 4 = 2019
#ANO5 = 2018


# Verificar as quantidades de registros de comercialização - 2023
quantidade_produtos_comercializados = gestor['VL_ANO_VIGENTE_MES01'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES01 possui {gestor['VL_ANO_VIGENTE_MES01'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES02'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES02 possui {gestor['VL_ANO_VIGENTE_MES02'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES03'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES03 possui {gestor['VL_ANO_VIGENTE_MES03'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES04'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES04 possui {gestor['VL_ANO_VIGENTE_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES05'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES05 possui {gestor['VL_ANO_VIGENTE_MES05'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES06'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES06 possui {gestor['VL_ANO_VIGENTE_MES06'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES07'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES07 possui {gestor['VL_ANO_VIGENTE_MES07'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES08'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES08 possui {gestor['VL_ANO_VIGENTE_MES08'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES09'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES09 possui {gestor['VL_ANO_VIGENTE_MES09'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES10'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES10 possui {gestor['VL_ANO_VIGENTE_MES10'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES11'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES11 possui {gestor['VL_ANO_VIGENTE_MES11'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['VL_ANO_VIGENTE_MES12'].sum()
print(f"A coluna VL_ANO_VIGENTE_MES12 possui {gestor['VL_ANO_VIGENTE_MES12'].sum()} registros de comercialização.")


# Verificar as quantidades de registros de comercialização - 2022
quantidade_valores_distintos = gestor['QT_ANO1_MES01'].sum()
print(f"A coluna QT_ANO1_MES01 possui {gestor['QT_ANO1_MES01'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES02'].sum()
print(f"A coluna QT_ANO1_MES02 possui {gestor['QT_ANO1_MES02'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES03'].sum()
print(f"A coluna QT_ANO1_MES03 possui {gestor['QT_ANO1_MES03'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES04'].sum()
print(f"A coluna QT_ANO1_MES04 possui {gestor['QT_ANO1_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES05'].sum()
print(f"A coluna QT_ANO1_MES05 possui {gestor['QT_ANO1_MES05'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES06'].sum()
print(f"A coluna QT_ANO1_MES06 possui {gestor['QT_ANO1_MES06'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES07'].sum()
print(f"A coluna QT_ANO1_MES07 possui {gestor['QT_ANO1_MES07'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES08'].sum()
print(f"A coluna QT_ANO1_MES08 possui {gestor['QT_ANO1_MES08'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES09'].sum()
print(f"A coluna QT_ANO1_MES09 possui {gestor['QT_ANO1_MES09'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES10'].sum()
print(f"A coluna QT_ANO1_MES10 possui {gestor['QT_ANO1_MES10'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES11'].sum()
print(f"A coluna QT_ANO1_MES11 possui {gestor['QT_ANO1_MES11'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO1_MES12'].sum()
print(f"A coluna QT_ANO1_MES12 possui {gestor['QT_ANO1_MES12'].sum()} registros de comercialização.")


# Verificar as quantidades de registros de comercialização - 2021
quantidade_valores_distintos = gestor['QT_ANO2_MES01'].sum()
print(f"A coluna QT_ANO2_MES01 possui {gestor['QT_ANO2_MES01'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES02'].sum()
print(f"A coluna QT_ANO2_MES02 possui {gestor['QT_ANO2_MES02'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES03'].nunique()
print(f"A coluna QT_ANO2_MES03 possui {gestor['QT_ANO2_MES03'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES04'].nunique()
print(f"A coluna QT_ANO2_MES04 possui {gestor['QT_ANO2_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES05'].sum()
print(f"A coluna QT_ANO2_MES05 possui {gestor['QT_ANO2_MES05'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES06'].sum()
print(f"A coluna QT_ANO2_MES06 possui {gestor['QT_ANO2_MES06'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES07'].sum()
print(f"A coluna QT_ANO2_MES07 possui {gestor['QT_ANO2_MES07'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES08'].sum()
print(f"A coluna QT_ANO2_MES08 possui {gestor['QT_ANO2_MES08'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES09'].sum()
print(f"A coluna QT_ANO2_MES09 possui {gestor['QT_ANO2_MES09'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES10'].sum()
print(f"A coluna QT_ANO2_MES10 possui {gestor['QT_ANO2_MES10'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES11'].sum()
print(f"A coluna QT_ANO2_MES11 possui {gestor['QT_ANO2_MES11'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO2_MES12'].sum()
print(f"A coluna QT_ANO2_MES12 possui {gestor['QT_ANO2_MES12'].sum()} registros de comercialização.")


# Verificar as quantidades de registros de comercialização - 2020
quantidade_valores_distintos = gestor['QT_ANO3_MES01'].sum()
print(f"A coluna QT_ANO3_MES01 possui {gestor['QT_ANO3_MES01'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES02'].sum()
print(f"A coluna QT_ANO3_MES02 possui {gestor['QT_ANO3_MES02'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES03'].sum()
print(f"A coluna QT_ANO3_MES03 possui {gestor['QT_ANO3_MES03'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES04'].sum()
print(f"A coluna QT_ANO3_MES04 possui {gestor['QT_ANO3_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES05'].sum()
print(f"A coluna QT_ANO3_MES05 possui {gestor['QT_ANO3_MES05'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES06'].sum()
print(f"A coluna QT_ANO3_MES06 possui {gestor['QT_ANO3_MES06'].sum()} registros de comercialização")
quantidade_valores_distintos = gestor['QT_ANO3_MES07'].sum()
print(f"A coluna QT_ANO3_MES07 possui {gestor['QT_ANO3_MES07'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES08'].sum()
print(f"A coluna QT_ANO3_MES08 possui {gestor['QT_ANO3_MES08'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES09'].sum()
print(f"A coluna QT_ANO3_MES09 possui {gestor['QT_ANO3_MES09'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES10'].sum()
print(f"A coluna QT_ANO3_MES10 possui {gestor['QT_ANO3_MES10'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES11'].sum()
print(f"A coluna QT_ANO3_MES11 possui {gestor['QT_ANO3_MES11'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO3_MES12'].sum()
print(f"A coluna QT_ANO3_MES12 possui {gestor['QT_ANO3_MES12'].sum()} registros de comercialização.")


# Verificar as quantidades de registros de comercialização - 2019
quantidade_valores_distintos = gestor['QT_ANO4_MES01'].sum()
print(f"A coluna QT_ANO4_MES01 possui {gestor['QT_ANO4_MES01'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES02'].sum()
print(f"A coluna QT_ANO4_MES02 possui {gestor['QT_ANO4_MES02'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES04'].sum()
print(f"A coluna QT_ANO4_MES04 possui {gestor['QT_ANO4_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES04'].sum()
print(f"A coluna QT_ANO4_MES04 possui {gestor['QT_ANO4_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES05'].sum()
print(f"A coluna QT_ANO4_MES05 possui {gestor['QT_ANO4_MES05'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES06'].sum()
print(f"A coluna QT_ANO4_MES06 possui {gestor['QT_ANO4_MES06'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES07'].sum()
print(f"A coluna QT_ANO4_MES07 possui {gestor['QT_ANO4_MES07'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES08'].sum()
print(f"A coluna QT_ANO4_MES08 possui {gestor['QT_ANO4_MES08'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES09'].sum()
print(f"A coluna QT_ANO4_MES09 possui {gestor['QT_ANO4_MES09'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES10'].sum()
print(f"A coluna QT_ANO4_MES10 possui {gestor['QT_ANO4_MES10'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES11'].sum()
print(f"A coluna QT_ANO4_MES11 possui {gestor['QT_ANO4_MES11'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO4_MES12'].sum()
print(f"A coluna QT_ANO4_MES12 possui {gestor['QT_ANO4_MES12'].sum()} registros de comercialização.")


# Verificar as quantidades de registros de comercialização - 2018
quantidade_valores_distintos = gestor['QT_ANO5_MES01'].sum()
print(f"A coluna QT_ANO5_MES01 possui {gestor['QT_ANO5_MES01'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES02'].sum()
print(f"A coluna QT_ANO5_MES02 possui {gestor['QT_ANO5_MES02'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES04'].sum()
print(f"A coluna QT_ANO5_MES04 possui {gestor['QT_ANO5_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES04'].sum()
print(f"A coluna QT_ANO5_MES04 possui {gestor['QT_ANO5_MES04'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES05'].sum()
print(f"A coluna QT_ANO5_MES05 possui {gestor['QT_ANO5_MES05'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES06'].sum()
print(f"A coluna QT_ANO5_MES06 possui {gestor['QT_ANO5_MES06'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES07'].sum()
print(f"A coluna QT_ANO5_MES07 possui {gestor['QT_ANO5_MES07'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES08'].sum()
print(f"A coluna QT_ANO5_MES08 possui {gestor['QT_ANO5_MES08'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES09'].sum()
print(f"A coluna QT_ANO5_MES09 possui {gestor['QT_ANO5_MES09'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES10'].sum()
print(f"A coluna QT_ANO5_MES10 possui {gestor['QT_ANO5_MES10'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES11'].sum()
print(f"A coluna QT_ANO5_MES11 possui {gestor['QT_ANO5_MES11'].sum()} registros de comercialização.")
quantidade_valores_distintos = gestor['QT_ANO5_MES12'].sum()
print(f"A coluna QT_ANO5_MES12 possui {gestor['QT_ANO5_MES12'].sum()} registros de comercialização.")

"""## Define o mês e ano de início de comercialização"""

# Define dicionário para troca do nome das colunas QT e VL antes de determinar o início da comercialização

# Para quantidade
colunas_com_as_datas_quant = {'QT_ANO_VIGENTE_MES01': 'QT_2023/01',
                              'QT_ANO_VIGENTE_MES02': 'QT_2023/02',
                              'QT_ANO_VIGENTE_MES03': 'QT_2023/03',
                              'QT_ANO_VIGENTE_MES04': 'QT_2023/04',
                              'QT_ANO_VIGENTE_MES05': 'QT_2023/05',
                              'QT_ANO_VIGENTE_MES06': 'QT_2023/06',
                              'QT_ANO1_MES01': 'QT_2022/01',
                              'QT_ANO1_MES02': 'QT_2022/02',
                              'QT_ANO1_MES03': 'QT_2022/03',
                              'QT_ANO1_MES04': 'QT_2022/04',
                              'QT_ANO1_MES05': 'QT_2022/05',
                              'QT_ANO1_MES06': 'QT_2022/06',
                              'QT_ANO1_MES07': 'QT_2022/07',
                              'QT_ANO1_MES08': 'QT_2022/08',
                              'QT_ANO1_MES09': 'QT_2022/09',
                              'QT_ANO1_MES10': 'QT_2022/10',
                              'QT_ANO1_MES11': 'QT_2022/11',
                              'QT_ANO1_MES12': 'QT_2022/12',
                              'QT_ANO2_MES01': 'QT_2021/01',
                              'QT_ANO2_MES02': 'QT_2021/02',
                              'QT_ANO2_MES03': 'QT_2021/03',
                              'QT_ANO2_MES04': 'QT_2021/04',
                              'QT_ANO2_MES05': 'QT_2021/05',
                              'QT_ANO2_MES06': 'QT_2021/06',
                              'QT_ANO2_MES07': 'QT_2021/07',
                              'QT_ANO2_MES08': 'QT_2021/08',
                              'QT_ANO2_MES09': 'QT_2021/09',
                              'QT_ANO2_MES10': 'QT_2021/10',
                              'QT_ANO2_MES11': 'QT_2021/11',
                              'QT_ANO2_MES12': 'QT_2021/12',
                              'QT_ANO3_MES01': 'QT_2020/01',
                              'QT_ANO3_MES02': 'QT_2020/02',
                              'QT_ANO3_MES03': 'QT_2020/03',
                              'QT_ANO3_MES04': 'QT_2020/04',
                              'QT_ANO3_MES05': 'QT_2020/05',
                              'QT_ANO3_MES06': 'QT_2020/06',
                              'QT_ANO3_MES07': 'QT_2020/07',
                              'QT_ANO3_MES08': 'QT_2020/08',
                              'QT_ANO3_MES09': 'QT_2020/09',
                              'QT_ANO3_MES10': 'QT_2020/10',
                              'QT_ANO3_MES11': 'QT_2020/11',
                              'QT_ANO3_MES12': 'QT_2020/12',
                              'QT_ANO4_MES01': 'QT_2019/01',
                              'QT_ANO4_MES02': 'QT_2019/02',
                              'QT_ANO4_MES03': 'QT_2019/03',
                              'QT_ANO4_MES04': 'QT_2019/04',
                              'QT_ANO4_MES05': 'QT_2019/05',
                              'QT_ANO4_MES06': 'QT_2019/06',
                              'QT_ANO4_MES07': 'QT_2019/07',
                              'QT_ANO4_MES08': 'QT_2019/08',
                              'QT_ANO4_MES09': 'QT_2019/09',
                              'QT_ANO4_MES10': 'QT_2019/10',
                              'QT_ANO4_MES11': 'QT_2019/11',
                              'QT_ANO4_MES12': 'QT_2019/12',
                              'QT_ANO5_MES01': 'QT_2018/01',
                              'QT_ANO5_MES02': 'QT_2018/02',
                              'QT_ANO5_MES03': 'QT_2018/03',
                              'QT_ANO5_MES04': 'QT_2018/04',
                              'QT_ANO5_MES05': 'QT_2018/05',
                              'QT_ANO5_MES06': 'QT_2018/06',
                              'QT_ANO5_MES07': 'QT_2018/07',
                              'QT_ANO5_MES08': 'QT_2018/08',
                              'QT_ANO5_MES09': 'QT_2018/09',
                              'QT_ANO5_MES10': 'QT_2018/10',
                              'QT_ANO5_MES11': 'QT_2018/11',
                              'QT_ANO5_MES12': 'QT_2018/12'}

# Para valor


colunas_com_as_datas_valor = {'VL_ANO_VIGENTE_MES01': 'VL_2023/01',
                              'VL_ANO_VIGENTE_MES02': 'VL_2023/02',
                              'VL_ANO_VIGENTE_MES03': 'VL_2023/03',
                              'VL_ANO_VIGENTE_MES04': 'VL_2023/04',
                              'VL_ANO_VIGENTE_MES05': 'VL_2023/05',
                              'VL_ANO_VIGENTE_MES06': 'VL_2023/06',
                              'VL_ANO1_MES01': 'VL_2022/01',
                              'VL_ANO1_MES02': 'VL_2022/02',
                              'VL_ANO1_MES03': 'VL_2022/03',
                              'VL_ANO1_MES04': 'VL_2022/04',
                              'VL_ANO1_MES05': 'VL_2022/05',
                              'VL_ANO1_MES06': 'VL_2022/06',
                              'VL_ANO1_MES07': 'VL_2022/07',
                              'VL_ANO1_MES08': 'VL_2022/08',
                              'VL_ANO1_MES09': 'VL_2022/09',
                              'VL_ANO1_MES10': 'VL_2022/10',
                              'VL_ANO1_MES11': 'VL_2022/11',
                              'VL_ANO1_MES12': 'VL_2022/12',
                              'VL_ANO2_MES01': 'VL_2021/01',
                              'VL_ANO2_MES02': 'VL_2021/02',
                              'VL_ANO2_MES03': 'VL_2021/03',
                              'VL_ANO2_MES04': 'VL_2021/04',
                              'VL_ANO2_MES05': 'VL_2021/05',
                              'VL_ANO2_MES06': 'VL_2021/06',
                              'VL_ANO2_MES07': 'VL_2021/07',
                              'VL_ANO2_MES08': 'VL_2021/08',
                              'VL_ANO2_MES09': 'VL_2021/09',
                              'VL_ANO2_MES10': 'VL_2021/10',
                              'VL_ANO2_MES11': 'VL_2021/11',
                              'VL_ANO2_MES12': 'VL_2021/12',
                              'VL_ANO3_MES01': 'VL_2020/01',
                              'VL_ANO3_MES02': 'VL_2020/02',
                              'VL_ANO3_MES03': 'VL_2020/03',
                              'VL_ANO3_MES04': 'VL_2020/04',
                              'VL_ANO3_MES05': 'VL_2020/05',
                              'VL_ANO3_MES06': 'VL_2020/06',
                              'VL_ANO3_MES07': 'VL_2020/07',
                              'VL_ANO3_MES08': 'VL_2020/08',
                              'VL_ANO3_MES09': 'VL_2020/09',
                              'VL_ANO3_MES10': 'VL_2020/10',
                              'VL_ANO3_MES11': 'VL_2020/11',
                              'VL_ANO3_MES12': 'VL_2020/12',
                              'VL_ANO4_MES01': 'VL_2019/01',
                              'VL_ANO4_MES02': 'VL_2019/02',
                              'VL_ANO4_MES03': 'VL_2019/03',
                              'VL_ANO4_MES04': 'VL_2019/04',
                              'VL_ANO4_MES05': 'VL_2019/05',
                              'VL_ANO4_MES06': 'VL_2019/06',
                              'VL_ANO4_MES07': 'VL_2019/07',
                              'VL_ANO4_MES08': 'VL_2019/08',
                              'VL_ANO4_MES09': 'VL_2019/09',
                              'VL_ANO4_MES10': 'VL_2019/10',
                              'VL_ANO4_MES11': 'VL_2019/11',
                              'VL_ANO4_MES12': 'VL_2019/12',
                              'VL_ANO5_MES01': 'VL_2018/01',
                              'VL_ANO5_MES02': 'VL_2018/02',
                              'VL_ANO5_MES03': 'VL_2018/03',
                              'VL_ANO5_MES04': 'VL_2018/04',
                              'VL_ANO5_MES05': 'VL_2018/05',
                              'VL_ANO5_MES06': 'VL_2018/06',
                              'VL_ANO5_MES07': 'VL_2018/07',
                              'VL_ANO5_MES08': 'VL_2018/08',
                              'VL_ANO5_MES09': 'VL_2018/09',
                              'VL_ANO5_MES10': 'VL_2018/10',
                              'VL_ANO5_MES11': 'VL_2018/11',
                              'VL_ANO5_MES12': 'VL_2018/12'}


# Renomeia as colunas conforme dicionários

gestor = gestor.rename(columns =colunas_com_as_datas_quant)

gestor = gestor.rename(columns =colunas_com_as_datas_valor)

# Para quantidade
# Início da comercialização = primeira coluna diferente de zero

# Define o subset do dataframe

subset_quant = ['QT_2023/01',
                'QT_2023/02',
                'QT_2023/03',
                'QT_2023/04',
                'QT_2023/05',
                'QT_2023/06',
                'QT_2022/01',
                'QT_2022/02',
                'QT_2022/03',
                'QT_2022/04',
                'QT_2022/05',
                'QT_2022/06',
                'QT_2022/07',
                'QT_2022/08',
                'QT_2022/09',
                'QT_2022/10',
                'QT_2022/11',
                'QT_2022/12',
                'QT_2021/01',
                'QT_2021/02',
                'QT_2021/03',
                'QT_2021/04',
                'QT_2021/05',
                'QT_2021/06',
                'QT_2021/07',
                'QT_2021/08',
                'QT_2021/09',
                'QT_2021/10',
                'QT_2021/11',
                'QT_2021/12',
                'QT_2020/01',
                'QT_2020/02',
                'QT_2020/03',
                'QT_2020/04',
                'QT_2020/05',
                'QT_2020/06',
                'QT_2020/07',
                'QT_2020/08',
                'QT_2020/09',
                'QT_2020/10',
                'QT_2020/11',
                'QT_2020/12',
                'QT_2019/01',
                'QT_2019/02',
                'QT_2019/03',
                'QT_2019/04',
                'QT_2019/05',
                'QT_2019/06',
                'QT_2019/07',
                'QT_2019/08',
                'QT_2019/09',
                'QT_2019/10',
                'QT_2019/11',
                'QT_2019/12',
                'QT_2018/01',
                'QT_2018/02',
                'QT_2018/03',
                'QT_2018/04',
                'QT_2018/05',
                'QT_2018/06',
                'QT_2018/07',
                'QT_2018/08',
                'QT_2018/09',
                'QT_2018/10',
                'QT_2018/11',
                'QT_2018/12'

                          ]

# Aplica o subset no dataframe

subset_gestor_quant = gestor[subset_quant]

# Encontra a primeira coluna diferente de zero no subest
primeira_coluna_diferente_de_zero_quant = subset_gestor_quant.apply(lambda row: row[row != 0].idxmin() if (row != 0).any() else "nao_comercializado", axis=1)

# Cria uma nova coluna no dataframe com a primeira coluna diferente de zero
gestor['INICIO_COMERCIALIZACAO_quant'] = primeira_coluna_diferente_de_zero_quant


# Para valor
# Início da comercialização = primeira coluna diferente de zero

# Define o subset do dataframe

subset_valor = ['VL_2023/01',
                'VL_2023/02',
                'VL_2023/03',
                'VL_2023/04',
                'VL_2023/05',
                'VL_2023/06',
                'VL_2022/01',
                'VL_2022/02',
                'VL_2022/03',
                'VL_2022/04',
                'VL_2022/05',
                'VL_2022/06',
                'VL_2022/07',
                'VL_2022/08',
                'VL_2022/09',
                'VL_2022/10',
                'VL_2022/11',
                'VL_2022/12',
                'VL_2021/01',
                'VL_2021/02',
                'VL_2021/03',
                'VL_2021/04',
                'VL_2021/05',
                'VL_2021/06',
                'VL_2021/07',
                'VL_2021/08',
                'VL_2021/09',
                'VL_2021/10',
                'VL_2021/11',
                'VL_2021/12',
                'VL_2020/01',
                'VL_2020/02',
                'VL_2020/03',
                'VL_2020/04',
                'VL_2020/05',
                'VL_2020/06',
                'VL_2020/07',
                'VL_2020/08',
                'VL_2020/09',
                'VL_2020/10',
                'VL_2020/11',
                'VL_2020/12',
                'VL_2019/01',
                'VL_2019/02',
                'VL_2019/03',
                'VL_2019/04',
                'VL_2019/05',
                'VL_2019/06',
                'VL_2019/07',
                'VL_2019/08',
                'VL_2019/09',
                'VL_2019/10',
                'VL_2019/11',
                'VL_2019/12',
                'VL_2018/01',
                'VL_2018/02',
                'VL_2018/03',
                'VL_2018/04',
                'VL_2018/05',
                'VL_2018/06',
                'VL_2018/07',
                'VL_2018/08',
                'VL_2018/09',
                'VL_2018/10',
                'VL_2018/11',
                'VL_2018/12'

                          ]

# Aplica o subset no dataframe

subset_gestor_valor = gestor[subset_valor]

# Encontra a primeira coluna diferente de zero no subest
primeira_coluna_diferente_de_zero_valor = subset_gestor_valor.apply(lambda row: row[row != 0].idxmin() if (row != 0).any() else "nao_comercializado", axis=1)

# Cria uma nova coluna no dataframe com a primeira coluna diferente de zero
gestor['INICIO_COMERCIALIZACAO_valor'] = primeira_coluna_diferente_de_zero_valor


# Remove o QT e o VL das colunas início de comercialização

gestor['INICIO_COMERCIALIZACAO_quant'] = gestor['INICIO_COMERCIALIZACAO_quant'].str.replace('QT_', '')

gestor['INICIO_COMERCIALIZACAO_valor'] = gestor['INICIO_COMERCIALIZACAO_valor'].str.replace('VL_', '')


# Cria uma coluna - meses de comercialização, a partir da quantidade

gestor['QT_MESES_COMERCIALIZACAO'] = gestor[subset_quant].sum(axis=1)


# Label encoder das variáveis "INICIO_COMERCIALIZACAO_quant" e "INICIO_COMERCIALIZACAO_valor" para medir a concordância
# Importa ferramentas de pré-processamento

label_encoder = preprocessing.LabelEncoder()

#forma simplificada de salvar o encoding
le_DataComercializacao = preprocessing.LabelEncoder()
le_DataComercializacao_valor = preprocessing.LabelEncoder()

#fit da codificação
gestor['le_INICIO_COMERCIALIZACAO_quant'] = le_DataComercializacao.fit_transform(gestor['INICIO_COMERCIALIZACAO_quant'])
gestor['le_INICIO_COMERCIALIZACAO_valor'] = le_DataComercializacao_valor.fit_transform(gestor['INICIO_COMERCIALIZACAO_valor'])

# Mede a concordância entre as datas de comercializção - cálculo de kappa

# Calcula o coeficiente de concordância de Cohen's Kappa
kappa = cohen_kappa_score(gestor['le_INICIO_COMERCIALIZACAO_quant'], gestor['le_INICIO_COMERCIALIZACAO_valor'])

# Exibe o resultado
print(f"O coeficiente de concordância de Cohen's Kappa é: {kappa}")


# Cria a coluna INICIO_COMERCIALIZACAO_quant_date a partir da coluna 'INICIO_COMERCIALIZACAO_quant
gestor['INICIO_COMERCIALIZACAO_quant_date'] = pd.to_datetime(gestor['INICIO_COMERCIALIZACAO_quant'], errors='coerce')



# Exclui as colunas VL e QT originais

gestor = gestor.drop(columns = subset_gestor_valor.columns)

gestor = gestor.drop(columns = subset_gestor_quant.columns)

"""### Ajusta as demais colunas do dataframe"""

# Para extrair o nome das colunas

# iterating the columns
for col in gestor.columns:
    print(col)

# Retira as colunas que não serão utilizadas

gestor = gestor.drop(columns = ['NU_EAN2_SM',
                                'NU_EAN3_SM',
                                'DS_CAS_DV',
                                'ANO_VIGENTE',
                                'QT_ANO_VIGENTE',
                                'VL_ANO_VIGENTE',
                                'ANO_1',
                                'QT_ANO_1',
                                'VL_ANO_1',
                                'ANO_2',
                                'QT_ANO_2',
                                'VL_ANO_2',
                                'ANO_3',
                                'QT_ANO_3',
                                'VL_ANO_3',
                                'ANO_4',
                                'QT_ANO_4',
                                'VL_ANO_4',
                                'ANO_5',
                                'QT_ANO_5',
                                'VL_ANO_5',
                                'ANO_VIGENTE_MES01',
                                'ANO_VIGENTE_MES02',
                                'ANO_VIGENTE_MES03',
                                'ANO_VIGENTE_MES04',
                                'ANO_VIGENTE_MES05',
                                'ANO_VIGENTE_MES06',
                                'ANO_VIGENTE_MES07',
                                'QT_ANO_VIGENTE_MES07',
                                'VL_ANO_VIGENTE_MES07',
                                'ANO_VIGENTE_MES08',
                                'QT_ANO_VIGENTE_MES08',
                                'VL_ANO_VIGENTE_MES08',
                                'ANO_VIGENTE_MES09',
                                'QT_ANO_VIGENTE_MES09',
                                'VL_ANO_VIGENTE_MES09',
                                'ANO_VIGENTE_MES10',
                                'QT_ANO_VIGENTE_MES10',
                                'VL_ANO_VIGENTE_MES10',
                                'ANO_VIGENTE_MES11',
                                'QT_ANO_VIGENTE_MES11',
                                'VL_ANO_VIGENTE_MES11',
                                'ANO_VIGENTE_MES12',
                                'QT_ANO_VIGENTE_MES12',
                                'VL_ANO_VIGENTE_MES12',
                                'ANO1_MES01',
                                'ANO1_MES02',
                                'ANO1_MES03',
                                'ANO1_MES04',
                                'ANO1_MES05',
                                'ANO1_MES06',
                                'ANO1_MES07',
                                'ANO1_MES08',
                                'ANO1_MES09',
                                'ANO1_MES10',
                                'ANO1_MES11',
                                'ANO1_MES12',
                                'ANO2_MES01',
                                'ANO2_MES02',
                                'ANO2_MES03',
                                'ANO2_MES04',
                                'ANO2_MES05',
                                'ANO2_MES06',
                                'ANO2_MES07',
                                'ANO2_MES08',
                                'ANO2_MES09',
                                'ANO2_MES10',
                                'ANO2_MES11',
                                'ANO2_MES12',
                                'ANO3_MES01',
                                'ANO3_MES02',
                                'ANO3_MES03',
                                'ANO3_MES04',
                                'ANO3_MES05',
                                'ANO3_MES06',
                                'ANO3_MES07',
                                'ANO3_MES08',
                                'ANO3_MES09',
                                'ANO3_MES10',
                                'ANO3_MES11',
                                'ANO3_MES12',
                                'ANO4_MES01',
                                'ANO4_MES02',
                                'ANO4_MES03',
                                'ANO4_MES04',
                                'ANO4_MES05',
                                'ANO4_MES06',
                                'ANO4_MES07',
                                'ANO4_MES08',
                                'ANO4_MES09',
                                'ANO4_MES10',
                                'ANO4_MES11',
                                'ANO4_MES12',
                                'ANO5_MES01',
                                'ANO5_MES02',
                                'ANO5_MES03',
                                'ANO5_MES04',
                                'ANO5_MES05',
                                'ANO5_MES06',
                                'ANO5_MES07',
                                'ANO5_MES08',
                                'ANO5_MES09',
                                'ANO5_MES10',
                                'ANO5_MES11',
                                'ANO5_MES12',
                                'DT_CARGA'])


# Renomeia a coluna 'NU_EAN_SM' para corresponder ao nome do arquivo peticao

gestor.rename(columns = {'NU_EAN_SM': 'EAN'}, inplace = True)

gestor.rename(columns = {'NU_GGREM_SM': 'GGREM'}, inplace = True)

"""## Exclusão de LINHAS na base gestor

### Drop 1: EAN em branco (56 linhas)
"""

drop1 =gestor[gestor['EAN'].isnull()]

drop1.to_csv('drop1.csv', index = False)

gestor.dropna(subset=['EAN'], inplace=True)

"""### Drop 2: EAN duplicados (4402 linhas retiradas)

"""

# Organiza o dataframe em ordem crescente de data de início de comercialização
gestor = gestor.sort_values('INICIO_COMERCIALIZACAO_quant_date')

# Salva as linhas duplicadas no drop2
drop2 = gestor[gestor.duplicated(subset='EAN')]

drop2.to_csv('drop2.csv', index = False)

# Mantém apeanas a ocorrência mais antiga das linhas com EAN duplicado com base na data de entrada da petição SAMMED

gestor= gestor.drop_duplicates('EAN', keep = 'first')

# Verifica casos duplicados para EAN após a exclusão dos na do início da comercialização
casos_duplicados = gestor.duplicated(subset='EAN').sum()

print(casos_duplicados)

"""### Drop 3: início da comercialização (quant) em branco (28 linhas)"""

drop3 = gestor[gestor['INICIO_COMERCIALIZACAO_quant'].isnull()]

drop3.to_csv('drop3.csv', index = False)

#Excluir as linhas com NaN na data de comercialização, já que não serão utilizadas na análise
gestor = gestor[gestor['INICIO_COMERCIALIZACAO_quant'].notna()]

"""### Salva a base de dados gestor final"""

gestor.to_csv('gestor_final.csv', index = 'False')