# -*- coding: utf-8 -*-
"""TCC_Parte_5_curvas_KM

Automatically generated by Colaboratory.

"""

# Bibliotecas

import pandas as pd

!pip install lifelines

from lifelines import KaplanMeierFitter
import matplotlib.pyplot as plt
from lifelines.statistics import logrank_test
from lifelines import CoxPHFitter
import statsmodels.api as sm
import numpy as np

#Para mostrar todas as colunas
pd.set_option('display.max_columns', None)

#Carrega e abre os arquivos

ordinarios = pd.read_csv('ordinarios_comercializados.csv', encoding = 'latin-1', sep=',', low_memory = False)

clones = pd.read_csv('clones_comercializados.csv', encoding = 'latin-1', sep=',', low_memory = False)

doencas_raras = pd.read_csv('doencas_raras_comercializadas.csv', encoding = 'latin-1', sep=',', low_memory = False)

priorizadas = pd.read_csv('priorizadas_comercializadas.csv', encoding = 'latin-1', sep=',', low_memory = False)

covid = pd.read_csv('covid_comercializados.csv', encoding = 'latin-1', sep=',', low_memory = False)

"""## Separa as colunas para criar arquivos para KM e total"""

colunas_a_manter = ['NU_PROCESSO',
                    'NO_PRODUTO',
                    'DT_PUBLICACAO',
                    'INICIO_COMERCIALIZACAO_quant',
                    'QT_MESES_COMERCIALIZACAO',
                    'INICIO_COMERCIALIZACAO_quant_date',
                    'DT_ENTRADA_PETICAO_SM']

"""### Medicamentos ordinários"""

ordinarios = ordinarios.loc[:, colunas_a_manter]

 ordinarios['MEDICAMENTO'] = 'ordinario'  # Cria coluna MEDICAMENTO e preenche com a classe

 ordinarios['PRIORIZADA'] = 'nao' # Cria coluna PRIORIZADA e preenche com o tipo

 ordinarios.to_csv('ordinarios_km.csv', index = False)

"""### Medicamentos clones"""

clones = clones.loc[:, colunas_a_manter]

clones['MEDICAMENTO'] = 'clone'

clones['PRIORIZADA'] = 'nao'

clones.to_csv('clones_km.csv', index=False)

"""### Medicamentos COVID"""

covid = covid.loc[:, colunas_a_manter]

covid['MEDICAMENTO'] = 'covid'

covid['PRIORIZADA'] = 'sim'

covid.to_csv('covid_km.csv', index = False)

"""### Medicamentos doenças raras"""

doencas_raras.head()

doencas_raras = doencas_raras.loc[:, colunas_a_manter]

doencas_raras['MEDICAMENTO'] = 'doencas_raras'

doencas_raras['PRIORIZADA'] = 'sim'

doencas_raras.to_csv('doencas_raras_km.csv', index = False)

"""### Priorizadas RDC 204/2017"""

priorizadas = priorizadas.loc[:, colunas_a_manter]

priorizadas['MEDICAMENTO'] = 'RDC204/2017'

priorizadas['PRIORIZADA'] = 'sim'

priorizadas.to_csv('priorizadas_km.csv', index= False)

"""## Prepara dataframe único a partir dos cinco dataframes para a construção da curva KM global"""

# Concatena
total = pd.concat([ordinarios, clones, doencas_raras, priorizadas, covid], keys=['NU_PROCESSO', 'NU_PROCESSO', 'NU_PROCESSO', 'NU_PROCESSO', 'NU_PROCESSO'], ignore_index=True)

# Verifica se há duplicatas na coluna NU_PROCESSO no dataframe combinado
duplicates = total.duplicated()

# Se não houver duplicatas, significa que os números da coluna X não se repetem entre os dataframes
if not duplicates.any():
    print("Os números da coluna NU_PROCESSO não se repetem entre os dataframes.")
else:
    print("Há números da coluna NU_PROCESSO que se repetem entre os dataframes.")

total.to_csv('total.csv', index = False)

# Renomeia colunas data inicial e final
total['Data_inicial'] = pd.to_datetime(total['DT_PUBLICACAO'])

total['Data_final'] = pd.to_datetime(total['INICIO_COMERCIALIZACAO_quant'], errors = 'coerce')

# Calcula o tempo de sobrevida, em dias

total['Tempo_sobrevida'] = (total['Data_final'] - total['Data_inicial']).dt.days # Cria a coluna Tempo_sobrevida

# Substitui os valores NaN (casos censurados) por zero na coluna de tempo de sobrevivência
total['Tempo_sobrevida'].fillna(0, inplace=True)

# Define o status do evento (1 para casos não censurados e 0 para casos censurados)

total['Status_evento'] =1 # Cria a coluna Status_evento

total.loc[total['Data_final'].isnull(), 'Status_evento'] = 0

"""# Curva 1A - tempo até a comercializaçao global"""

# Cria uma instância do KaplanMeierFitter e ajusta a curva de sobrevivência global
kmf = KaplanMeierFitter()
kmf.fit(total['Tempo_sobrevida'], event_observed=total['Status_evento'])


# Plota a curva de sobrevivência global
plt.figure(figsize=(10, 6))
kmf.plot(ci_show=True)


plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')


plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')
plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)
plt.savefig(f'Figura_1A: tempo de sobrevida global.png')

plt.show()

"""## Prepara cada um dos dataframes para a curva para as cinco classes"""

# Cria colunas data inicial e final, para cada dataframe individual

ordinarios['Data_inicial'] = pd.to_datetime(ordinarios['DT_PUBLICACAO'])
ordinarios['Data_final'] = pd.to_datetime(ordinarios['INICIO_COMERCIALIZACAO_quant'], errors = 'coerce')

clones['Data_inicial'] = pd.to_datetime(clones['DT_PUBLICACAO'])
clones['Data_final'] = pd.to_datetime(clones['INICIO_COMERCIALIZACAO_quant'], errors = 'coerce')

doencas_raras['Data_inicial'] = pd.to_datetime(doencas_raras['DT_PUBLICACAO'])
doencas_raras['Data_final'] = pd.to_datetime(doencas_raras['INICIO_COMERCIALIZACAO_quant'], errors = 'coerce')

priorizadas['Data_inicial'] = pd.to_datetime(priorizadas['DT_PUBLICACAO'])
priorizadas['Data_final'] = pd.to_datetime(priorizadas['INICIO_COMERCIALIZACAO_quant'], errors = 'coerce')

covid['Data_inicial'] = pd.to_datetime(covid['DT_PUBLICACAO'])
covid['Data_final'] = pd.to_datetime(covid['INICIO_COMERCIALIZACAO_quant'], errors = 'coerce')

# Calcula o tempo de sobrevida, em dias, para cada dataframe

ordinarios['Tempo_sobrevida'] = (ordinarios['Data_final'] - ordinarios['Data_inicial']).dt.days
priorizadas['Tempo_sobrevida'] = (priorizadas['Data_final'] - priorizadas['Data_inicial']).dt.days
clones['Tempo_sobrevida'] = (clones['Data_final'] - clones['Data_inicial']).dt.days
covid['Tempo_sobrevida'] = (covid['Data_final'] - covid['Data_inicial']).dt.days
doencas_raras['Tempo_sobrevida'] = (doencas_raras['Data_final'] - doencas_raras['Data_inicial']).dt.days

# Substitui os valores NaN (casos censurados) por zero na coluna de tempo de sobrevivência

ordinarios['Tempo_sobrevida'].fillna(0, inplace=True)
priorizadas['Tempo_sobrevida'].fillna(0, inplace=True)
clones['Tempo_sobrevida'].fillna(0, inplace=True)
covid['Tempo_sobrevida'].fillna(0, inplace=True)
doencas_raras['Tempo_sobrevida'].fillna(0, inplace=True)

# Define o status do evento (1 para casos não censurados e 0 para casos censurados)
ordinarios['Status_evento'] = 1
ordinarios.loc[ordinarios['Data_final'].isnull(), 'Status_evento'] = 0

priorizadas['Status_evento'] = 1
priorizadas.loc[priorizadas['Data_final'].isnull(), 'Status_evento'] = 0

clones['Status_evento'] = 1
clones.loc[clones['Data_final'].isnull(), 'Status_evento'] = 0

covid['Status_evento'] = 1
covid.loc[covid['Data_final'].isnull(), 'Status_evento'] = 0

doencas_raras['Status_evento'] = 1
doencas_raras.loc[doencas_raras['Data_final'].isnull(), 'Status_evento'] = 0

"""# Curva 1B - tempo até a comercialização, para cada um dos cinco tipos: ordinários, clones, covid, doenças raras e priorizados RDC 204/2017"""

# Cria instâncias do KaplanMeierFitter e ajusta as curvas de sobrevivência para cada subset
kmf_ord = KaplanMeierFitter()
kmf_ord.fit(ordinarios['Tempo_sobrevida'], event_observed=ordinarios['Status_evento'])

kmf_pri = KaplanMeierFitter()
kmf_pri.fit(priorizadas['Tempo_sobrevida'], event_observed=priorizadas['Status_evento'])

kmf_clones = KaplanMeierFitter()
kmf_clones.fit(clones['Tempo_sobrevida'], event_observed=clones['Status_evento'])

kmf_covid = KaplanMeierFitter()
kmf_covid.fit(covid['Tempo_sobrevida'], event_observed=covid['Status_evento'])

kmf_dr = KaplanMeierFitter()
kmf_dr.fit(doencas_raras['Tempo_sobrevida'], event_observed=doencas_raras['Status_evento'])

# Plota as curvas de sobrevivência para cada subset
plt.figure(figsize=(10, 6))
kmf_ord.plot(ci_show=True, label='ordinários, n= 451')
kmf_clones.plot(ci_show=True, label='clones, n = 687')
kmf_pri.plot(ci_show=True, label='RDC 204/17, n= 64')
kmf_covid.plot(ci_show=True, label='covid, n = 27')
kmf_dr.plot(ci_show=True, label='doenças raras, n = 33')

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')

plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')
plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)

plt.savefig(f'Figura_1B: tempo de sobrevida 5 classes.png')

plt.show()

# Ajusta o modelo de regressão de Cox
cph = CoxPHFitter()
cph.fit(total, duration_col='Tempo_sobrevida', event_col='Status_evento', formula = 'MEDICAMENTO', show_progress=True)

# Imprime os resultados do modelo de Cox
print(cph.summary)

# A coluna priorizados RDC 204/2017 foi utilIzada como referência

"""# Figura 1C: priorizados (todos) X não priorizados"""

# Separa o DataFrame em grupos com base na variável 'PRIORIZADA'
nao_priorizadas = total.loc[total['PRIORIZADA'] == 'nao']
priorizadas = total.loc[total['PRIORIZADA'] == 'sim']

# Converte o tipo de dado e trata NAN
nao_priorizadas['Tempo_sobrevida'] = pd.to_numeric(nao_priorizadas['Tempo_sobrevida'], errors='coerce')  # Converte para numérico, tratando valores inválidos como NaN
nao_priorizadas = nao_priorizadas.dropna(subset=['Tempo_sobrevida'])  # Remove linhas com valores NaN na coluna 'Tempo_sobrevida'

priorizadas['Tempo_sobrevida'] = pd.to_numeric(priorizadas['Tempo_sobrevida'], errors='coerce')  # Converte para numérico, tratando valores inválidos como NaN
priorizadas = priorizadas.dropna(subset=['Tempo_sobrevida'])  # Remove linhas com valores NaN na coluna 'Tempo_sobrevida'


nao_priorizadas['Status_evento'] =1
priorizadas['Status_evento'] =1

nao_priorizadas.loc[nao_priorizadas['Data_final'].isnull(), 'Status_evento'] = 0
priorizadas.loc[priorizadas['Data_final'].isnull(), 'Status_evento'] = 0

# Cria uma instância do KaplanMeierFitter e ajusta a curva de sobrevida
kmf_nao_priorizadas = KaplanMeierFitter()
kmf_nao_priorizadas.fit(nao_priorizadas['Tempo_sobrevida'], event_observed=nao_priorizadas['Status_evento'])

kmf_priorizadas = KaplanMeierFitter()
kmf_priorizadas.fit(durations=priorizadas['Tempo_sobrevida'], event_observed=priorizadas['Status_evento'])


# Plota as curvas de sobrevivência para cada subset
plt.figure(figsize=(10, 6))
kmf_nao_priorizadas.plot(ci_show=True, label='registros não priorizados, n= 1138')
kmf_priorizadas.plot(ci_show=True, label='registros priorizados, n = 124')

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')


plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')

plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)
plt.savefig(f'Figura_1C: tempo de sobrevida priorizadas e nao priorizadas.png')

plt.show()

#Realiza o teste de log-rank para comparar as curvas de sobrevivência entre os subsets priorizados e ordinários
result = logrank_test(nao_priorizadas['Tempo_sobrevida'], priorizadas['Tempo_sobrevida'], nao_priorizadas['Status_evento'], priorizadas['Status_evento'])

#Exibe o resultado do teste de log-rank
print("Estatística de Teste (Log-Rank): {:.2f}".format(result.test_statistic))
print("Valor de p: {:.4f}".format(result.p_value))

# Ajusta o modelo de regressão de Cox
cph = CoxPHFitter()
cph.fit(total, duration_col='Tempo_sobrevida', event_col='Status_evento', formula = 'PRIORIZADA', show_progress=True)

# Imprime os resultados do modelo de Cox
print(cph.summary)

"""# Figura 1D: priorizados sem COVID X não priorizados"""

# Separa as priorizadas e excluí covid
priorizadas = total.loc[total['PRIORIZADA'] == 'sim']
priorizadas_sem_covid = priorizadas[priorizadas['MEDICAMENTO'] != 'covid']

# Instancia o KaplanMeierFitter e ajusta os dados corrigidos
kmf_priorizadas_sem_covid = KaplanMeierFitter()
kmf_priorizadas_sem_covid.fit(durations=priorizadas_sem_covid['Tempo_sobrevida'], event_observed=priorizadas_sem_covid['Status_evento'])

# Plota as curvas de sobrevivência para cada subset
plt.figure(figsize=(10, 6))
kmf_nao_priorizadas.plot(ci_show=True, label='registros não priorizados, n= 1138')
kmf_priorizadas_sem_covid.plot(ci_show=True, label='registros priorizados, n = 97')

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')


plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')

plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)
plt.savefig(f'Figura_1D: tempo de sobrevida priorizadas e nao priorizadas sem covid.png')

plt.show()

# Realiza o teste de log-rank para comparar as curvas de sobrevivência entre os subsets priorizados e ordinários
result = logrank_test(covid['Tempo_sobrevida'], doencas_raras['Tempo_sobrevida'],
                      covid['Status_evento'], doencas_raras['Status_evento'])

# Exibe o resultado do teste de log-rank
print("Estatística de Teste (Log-Rank): {:.2f}".format(result.test_statistic))
print("Valor de p: {:.4f}".format(result.p_value))

# Tempo até a o início da comercialização é menor para medicamentos priorizados do que para medicamentos ordinários (teste de log-rank, p = 0,0310)

# Realiza o teste de log-rank para comparar as curvas de sobrevivência entre os subsets priorizados e ordinários
result = logrank_test(nao_priorizadas['Tempo_sobrevida'], priorizadas_sem_covid['Tempo_sobrevida'],
                      nao_priorizadas['Status_evento'], priorizadas_sem_covid['Status_evento'])

# Exibe o resultado do teste de log-rank
print("Estatística de Teste (Log-Rank): {:.2f}".format(result.test_statistic))
print("Valor de p: {:.4f}".format(result.p_value))

total_sem_covid = total[total['MEDICAMENTO'] != 'covid']

# Ajusta o modelo de regressão de Cox
cph = CoxPHFitter()
cph.fit(total_sem_covid, duration_col='Tempo_sobrevida', event_col='Status_evento', formula = 'PRIORIZADA', show_progress=True)

# Imprime os resultados do modelo de Cox
print(cph.summary)

"""# Figura 1E: doenças raras"""

# Cria uma instância do KaplanMeierFitter e ajusta a curva de sobrevivência global
kmf_dr = KaplanMeierFitter()
kmf_dr.fit(doencas_raras['Tempo_sobrevida'], event_observed=doencas_raras['Status_evento'])

# Obter as coordenadas do ponto de interseção
intersecao_x = 365
intersecao_y = kmf_dr.predict(intersecao_x)

# Plota a curva de sobrevivência para os casos de doença
plt.figure(figsize=(10, 6))
kmf_dr.plot(ci_show=True)

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')
plt.axvline(x=365, color='red', linestyle='--', label='365 dias')
plt.hlines(y=intersecao_y, xmin=0, xmax=intersecao_x, color='blue', linestyle='--', label='cumprimento do prazo legal')
plt.xlabel('Dias')
plt.ylabel('Sobrevida')

# Define os limites do eixo x para começar em 0
plt.xlim(0)

plt.legend ()
plt.savefig(f'Figura_1E: tempo de sobrevida apenas doencas raras.png')
plt.show()

"""#Figura 1 F: pré e pós pandemia"""

# Exclui COVID do dataframe

categorias = ['ordinario', 'clone', 'doencas_raras', 'RDC204/2017']

sem_covid = total[total['MEDICAMENTO'].isin(categorias)]

# Define uma função para atribuir o valor 0 ou 1 à nova coluna com base na data
def atribuir_valor(data):
    if data <= pd.to_datetime('2019-12-31'):
        return 0
    else:
        return 1

# Aplica a função à coluna 'Data_inicial' e criar a nova coluna 'PANDEMIA'
sem_covid['PANDEMIA'] = total['Data_inicial'].apply(atribuir_valor)

# Separa o DataFrame em grupos com base na variável 'PANDEMIA'
antes_pandemia = sem_covid.loc[sem_covid['PANDEMIA'] == 0]
pandemia = sem_covid.loc[sem_covid['PANDEMIA'] == 1]

sem_covid['Tempo_sobrevida'] = pd.to_numeric(sem_covid['Tempo_sobrevida'])
sem_covid['Status_evento'] = sem_covid['Status_evento'].astype(bool)


# Converte tempo para numérico e trata NAN
sem_covid['Tempo_sobrevida'] = pd.to_numeric(sem_covid['Tempo_sobrevida'], errors='coerce')  # Converte para numérico, tratando valores inválidos como NaN
sem_covid = sem_covid.dropna(subset=['Tempo_sobrevida'])  # Remove linhas com valores NaN na coluna 'Tempo_sobrevida'

# Instancia o KaplanMeierFitter e ajusta os dados corrigidos
kmf_antes = KaplanMeierFitter()
kmf_antes.fit(durations=sem_covid['Tempo_sobrevida'], event_observed=sem_covid['Status_evento'])

kmf_pandemia = KaplanMeierFitter()
kmf_pandemia.fit(durations=sem_covid['Tempo_sobrevida'], event_observed=sem_covid['Status_evento'])

# Plota as curvas de sobrevivência para cada subset
plt.figure(figsize=(10, 6))
kmf_antes.plot(ci_show=True, label='registros publicados 2018 e 2019, n= 706')
kmf_pandemia.plot(ci_show=True, label='registros publicados em 2020 e 2021, n = 529')

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')


plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')

plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)
plt.savefig(f'Figura_1F: tempo de sobrevida 2018-19 X 2020-21.png')

plt.show()

"""# Ordinários X clones"""

# Cria instâncias do KaplanMeierFitter e ajusta as curvas de sobrevivência para cada subset
kmf_ord = KaplanMeierFitter()
kmf_ord.fit(ordinarios['Tempo_sobrevida'], event_observed=ordinarios['Status_evento'])


kmf_clones = KaplanMeierFitter()
kmf_clones.fit(clones['Tempo_sobrevida'], event_observed=clones['Status_evento'])


# Plota as curvas de sobrevivência para cada subset
plt.figure(figsize=(10, 6))
kmf_ord.plot(ci_show=True, label='ordinários, n=451')
kmf_clones.plot(ci_show=True, label='clones, n = 687')

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')


plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')

plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)
plt.savefig(f'Figura_1E: tempo de sobrevida ordinarias e clones.png')

plt.show()

# Realiza o teste de log-rank para comparar as curvas de sobrevivência entre os subsets priorizados e ordinários
result = logrank_test(ordinarios['Tempo_sobrevida'], clones['Tempo_sobrevida'],
                      ordinarios['Status_evento'], clones['Status_evento'])

# Exibe o resultado do teste de log-rank
print("Estatística de Teste (Log-Rank): {:.2f}".format(result.test_statistic))
print("Valor de p: {:.4f}".format(result.p_value))

"""# Apenas priorizadas"""

# Cria instâncias do KaplanMeierFitter e ajusta as curvas de sobrevivência para cada subset

kmf_pri = KaplanMeierFitter()
kmf_pri.fit(priorizadas['Tempo_sobrevida'], event_observed=priorizadas['Status_evento'])


kmf_covid = KaplanMeierFitter()
kmf_covid.fit(covid['Tempo_sobrevida'], event_observed=covid['Status_evento'])

kmf_dr = KaplanMeierFitter()
kmf_dr.fit(doencas_raras['Tempo_sobrevida'], event_observed=doencas_raras['Status_evento'])

# Plota as curvas de sobrevivência para cada subset
plt.figure(figsize=(10, 6))

kmf_pri.plot(ci_show=True, label='RDC 204/17, n= 64')
kmf_covid.plot(ci_show=True, label='covid, n = 27')
kmf_dr.plot(ci_show=True, label='doenças raras, n = 33')

plt.axhline(y=0.5, color='black', linestyle='--', label='Sobrevida = 0.5')

plt.axvline(x=365, color='red', linestyle='--', label='1 ano')
plt.axvline(x=730, color='blue', linestyle='--', label='2 anos')
plt.axvline(x=1095, color='green', linestyle='--', label='3 anos')
plt.axvline(x=1460, color='purple', linestyle='--', label='4 anos')
plt.xlabel('Dias')
plt.ylabel('Sobrevida')
plt.legend()

# Define os limites do eixo x para começar em 0
plt.xlim(0)
plt.savefig(f'Figura_1D: tempo de sobrevida priorizadas.png')

plt.show()

# Mantém apenas as priorizadas no dataframe

apenas_priorizadas = ['doencas_raras', 'covid', 'RDC204/2017']

filtro_priorizadas = total[total['MEDICAMENTO'].isin(apenas_priorizadas)]

# Ajusta o modelo de regressão de Cox
cph = CoxPHFitter()
cph.fit(filtro_priorizadas, duration_col='Tempo_sobrevida', event_col='Status_evento', formula = 'MEDICAMENTO', show_progress=True)

# Imprime os resultados do modelo de Cox
print(cph.summary)

# A coluna priorizados RDC 204/2017 foi utilIzada como referência