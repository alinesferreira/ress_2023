# -*- coding: utf-8 -*-
"""TCC_Parte_3 _bases_ordinarios/doencas_raras/priorizadas/clones/covid

Automatically generated by Colaboratory.

"""

# Bibliotecas

import pandas as pd

# Para evitar o erro que o colab excedeu a capacidade

from pprint import pprint

printable = 'long statement'
pprint(printable)

# Para mostrar todas as colunas

pd.set_option('display.max_columns', None)

"""# Base medicamentos ordinários"""

# Carrega e abrir o arquivo
ordinarios = pd.read_excel('Dados_Aline_31jul23.xlsx', sheet_name = 'Planilha1')

# Verifica o intervalo de data de publicação do estudo
ordinarios['DT_PUBLICACAO'] = pd.to_datetime(ordinarios['DT_PUBLICACAO'])

# Obter a data mínima e máxima da coluna 'Data'
data_minima = ordinarios['DT_PUBLICACAO'].min()
data_maxima = ordinarios['DT_PUBLICACAO'].max()

print("\nData mínima:", data_minima)
print("Data máxima:", data_maxima)

"""### Filtra LINHAS base ordinários

Mantém linhas cujo status seja 'Publicado deferimento'
"""

ordinarios = ordinarios.query('DS_SITUACAO_ATUAL_PETICAO == "Publicado deferimento"')

"""Exclui categorias da categoria regulatória do escopo do grupo 1 do Comunicado 4/2009 da CMED"""

assuntos_mantidos = ['GENERICO - Registro de Medicamento', 'SIMILAR - Registro de Medicamento Similar', 'ESPECÍFICO - Registro de Medicamento',
                     'MEDICAMENTO NOVO - Registro de Forma Farmacêutica Nova no País','MEDICAMENTO NOVO - Registro Eletrônico de Medicamento Novo',
                     'MEDICAMENTO NOVO - Registro de Medicamento Novo', 'ESPECÍFICO - Registro de Medicamento - Solução Parenteral.',
                     'MEDICAMENTO FITOTERÁPICO - Registro de Medicamento',
                     'MEDICAMENTO NOVO - Registro de Nova Associação no País', 'MEDICAMENTO NOVO - Registro de Concentração Nova no País',
                     'GENÉRICO - Registro de Medicamento Genérico (Parceria de Desenvolvimento Produtivo)',
                     'MEDICAMENTO NOVO - Registro de Medicamento com mesmo(s) IFA(s) de Medicamento Novo já registrado',
                     'Medicamento Inovador - Registro de Medicamento com Inovação Diversa ']


ordinarios = ordinarios[ordinarios['DS_ASSUNTO'].isin(assuntos_mantidos)]

"""Mantém linhas cujo critério de priorização seja 'Não se aplica'"""

ordinarios = ordinarios.query(' DS_CRITERIO_PRIORIZACAO == "Não se aplica"')

"""Mantém linhas não duplicadas"""

duplicatas = ordinarios[ordinarios.duplicated(subset='NU_PROCESSO', keep=False)]
print(duplicatas)

duplicates = ordinarios.duplicated()

# Filtra o dataframe e mostrar as linhas duplicadas
if duplicates.any():
    duplicated_rows = ordinarios[ordinarios.duplicated(keep=False)]
    print("Linhas duplicadas na coluna X:")
    print(duplicated_rows)
else:
    print("Não foram encontradas duplicatas na coluna X.")

ordinarios = ordinarios.sort_values(by='DT_PUBLICACAO')

# Mantém apenas a primeira ocorrência das duplicatas (a mais antiga)
ordinarios = ordinarios.drop_duplicates(subset='NU_PROCESSO', keep='first')

"""### Salva a base ordinarios trabalhada"""

ordinarios.to_csv('ordinarios.csv',index = False)

"""# Ajusta as priorizações da base registro: doenças raras, RDC204 e COVID

## Ajuste manual para doenças raras, de acordo com o relatório de gestão do ano 2021
"""

# Carrega e abre o arquivo
registro = pd.read_excel('registro.xlsx', sheet_name = 'Planilha1')

status = pd.read_excel('Prazo_Registro.xlsx', sheet_name = 'status')

# Filtra as linhas para doenças raras (dr)
dr = registro[registro['DS_CRITERIO_PRIORIZACAO'] == 'Doença Rara']

# Medicamentos com entrada mais antigas não estão marcados como doenças raras - solução: marcação manual a partir do nome comercial do medicamento, conforme lista do relatório de gestão da ANVISA de 2021

tratamentos_especificos_dr = ['CABOMETYX',
                             'CALQUENCE',
                             'ERLEADA',
                             'IBRANCE',
                             'KALYDECO',
                             'ORKAMBI',
                             'VENCLEXTA',
                             'CARBAGLU',
                             'ICLUSIG',
                             'TRANSLARNA',
                             'CRESEMBA',
                             'NITIKABS',
                             'VITRAKVI',
                             'EVOBRIG',
                             'TEGSEDI',
                             'ERFANDEL',
                             'PIQRAY',
                             'GALAFOLD',
                             'NUBEQA',
                             'LOJUXTA',
                             'SYMDEKO',
                             'BELEODAQ',
                             'LORBRENA',
                             'ONPATTRO',
                             'GIVLAARI',
                             'EVRYSDI',
                             'DOJOLVI',
                             'KOSELUGO',
                             'ZEJULA',
                             'WAYLIVRA',
                             'AUSTEDO',
                             'OXLUMO',
                             'TABRECTA',
                             'TEPMETKO',
                             'BRUKINSA',
                             'WILLETINE']


# Mantém as linhas cujo no_produto é algum tratamento para doenças raras

linhas_dr = registro[registro['NO_PRODUTO'].isin(tratamentos_especificos_dr)]

# Renomeia a coluna DS_CRITERIO_PRIORIZACAO para Doenca_Rara

registro.loc[linhas_dr.index,'DS_CRITERIO_PRIORIZACAO'] = 'Doenca_Rara'

# Define a base doencas_raras para aquela cujo linha de 'DS_CRITERIO_PRIORIZACAO' seja 'Doenca_Rara' a partir do nome do medicamento, conforme linhas a manter

doencas_raras = registro.query("DS_CRITERIO_PRIORIZACAO == 'Doenca_Rara' ")

doencas_raras['NU_PROCESSO'] = doencas_raras['NU_PROCESSO'].astype(str)  # Converta para string se necessário

status['NU_PROCESSO'] = status['NU_PROCESSO'].astype(str)

doencas_raras = pd.merge(doencas_raras, status, on='NU_PROCESSO', how = 'inner')

"""### Salva a base doencas_raras"""

doencas_raras.to_csv('doencas_raras.csv', index = False)

"""# Priorizadas RDC 204/2017

## Priorizadas dentro do escopo da RDC 204/2017 (listas, priorizadas GADIP antes da vigência da norma), que foram tratadas por mecanismo priorizado conforme anotação no Datavisa
"""

# Priorizadas manual

priorizadas = pd.read_excel('Priorizados sem critério de priorização.xlsx', sheet_name = 'Planilha1')

# Dicionário para marcar as priorizadas RDC204
renomear_priorizadas= {'priorizadaLista': 'RDC204',
                       'priorizadaGADIP': 'RDC204',
                       'RDC204': 'RDC204',
                       'indeferido': 'outros',
                       'repetida': 'outros',
                       'doenca_rara': 'outros',
                       'priorizadaLista_doenca_rara(DUVIDA)': 'outros',
                       'priorizadaAditamento': 'RDC204'}

priorizadas['Verificacao_datavisa'] = priorizadas['Verificacao_datavisa'].replace(renomear_priorizadas)

# Mantém apenas as linhas que foram marcadas como RDC 204

priorizadas_manual = priorizadas.query("Verificacao_datavisa == 'RDC204' ")

priorizadas_manual.to_csv('priorizadas_manual.csv', index =False)

"""## Priorizadas_manual foi acrescentado a priorizadas registro de forma manual"""

priorizadas = pd.read_csv('priorizadas.csv')

# Verifica processos duplicados

duplicatas = priorizadas[priorizadas.duplicated(subset='NU_PROCESSO', keep=False)]
print(duplicatas)

# Mantém apenas a primeira ocorrência das duplicatas (a mais antiga)
priorizadas = priorizadas.drop_duplicates(subset='NU_PROCESSO', keep='first')

"""### Salva o arquivo priorizadas"""

priorizadas.to_csv('priorizadas.csv', index = False)

"""# Base medicamentos clones"""

#Carrega e lê o arquivo
clones = pd.read_excel('Tabela_Registros Clones.xlsx', sheet_name = 'Planilha1')

"""Mantém linhas não duplicadas"""

# Verifica processos duplicados

duplicatas = clones[clones.duplicated(subset='NU_PROCESSO', keep=False)]
print(duplicatas)

"""Mantém status 'Publicado deferimento'"""

clones = clones[clones['DS_SITUACAO_ATUAL_PETICAO'] == 'Publicado deferimento']

"""Exclui PTF (Produto Tradicional Fitoterápico) - fora do escopo conforme Comunicado 4/2009 - SCMED"""

valores_a_retirar = ['PRODUTO TRADICIONAL FITOTERÁPICO - Registro de Medicamento - CLONE']

clones = clones[~clones['DS_ASSUNTO'].isin(valores_a_retirar)]

"""Salva o arquivo clones"""

clones.to_csv('clones.csv', index = False)

"""# Base medicamentos COVID"""

#Carrega e lê o arquivo
covid = pd.read_excel('covid.xlsx', sheet_name='Planilha1')

# Verifica processos duplicados

duplicatas = covid[covid.duplicated(subset='NU_PROCESSO', keep=False)]
print(duplicatas)

# Renomeia coluna

covid = covid.rename(columns = {'DT_1_PUBLICACAO': 'DT_PUBLICACAO'})

"""### Ajusta datas de publicação para o período do estudo"""

# Obter a data mínima e máxima da coluna 'Data'
data_minima = covid['DT_PUBLICACAO'].min()
data_maxima = covid['DT_PUBLICACAO'].max()

print("\nData mínima:", data_minima)
print("Data máxima:", data_maxima)

covid['DT_PUBLICACAO'] = pd.to_datetime(covid['DT_PUBLICACAO'])

covid = covid[covid['DT_PUBLICACAO'] <= '2021-12-31']

"""Salva o arquivo covid"""

covid.to_csv('covid.csv', index = False)